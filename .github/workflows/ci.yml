#name: Selenium CI with Maven  # Название workflow для отображения в интерфейсе GitHub Actions
#
#on:
#  push:                     # Запуск workflow при push-коммитах в указанные ветки
#    branches:
#      - main                # Workflow будет запускаться только для ветки main
#  pull_request:             # Запуск workflow при создании pull request в указанные ветки
#    branches:
#      - main                # Workflow будет запускаться для pull request в ветку main
#  workflow_dispatch:        # Возможность ручного запуска workflow через интерфейс GitHub Actions
#
#jobs:
#  test:                     # Определение работы (job) под названием 'test'
#    name: 'Test'            # Человеко-читаемое имя работы (отображается в интерфейсе GitHub Actions)
#    runs-on: ubuntu-latest  # Используемый runner — виртуальная машина с Ubuntu последней версии
#
#    steps:                  # Последовательность шагов выполнения работы
#      - name: Git clone     # Первый шаг: клонирование репозитория
#        uses: actions/checkout@v4  # Действие GitHub для клонирования кода
#        with:
#          fetch-depth: 0    # Полное клонирование репозитория (включая историю всех коммитов)
#
#      - name: Install JDK   # Установка Java Development Kit (JDK)
#        uses: actions/setup-java@v4  # Действие GitHub для настройки JDK
#        with:
#          distribution: 'corretto'  # Используется Amazon Corretto (бесплатная версия Java)
#          java-version: '17'        # Версия JDK — Java 17
#          cache: 'maven'            # Включение кэширования зависимостей Maven для ускорения сборки
#
#      - name: Maven test            # Шаг запуска тестов с помощью Maven
#        run: mvn test               # Выполнение команды для запуска тестов
#        env:                        # Переменные окружения для тестов
#          CHROME_OPTIONS: --remote-allow-origins=*;--disable-gpu;--no-sandbox;--disable-dev-shm-usage;--headless=new;--window-size=1920,1080
#          # CHROME_OPTIONS — передача настроек Chrome для запуска в CI
#          # --remote-allow-origins=*  — разрешение для удалённых источников
#          # --disable-gpu             — отключение использования GPU
#          # --no-sandbox              — отключение песочницы для повышения стабильности
#          # --disable-dev-shm-usage   — снижение использования общей памяти
#          # --headless=new            — запуск Chrome в безголовом режиме (без GUI)
#          # --window-size=1920,1080   — установка размеров окна браузера
#          CI_RUN: true               # Флаг для указания, что тесты запущены в CI

# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven
name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Get list of changed files
        run: echo "LIST_OF_CHANGED_FILES=$(git diff --name-only origin/$GITHUB_HEAD_REF $(git merge-base origin/$GITHUB_HEAD_REF origin/main) | tr '\n' ';')" >> $GITHUB_ENV

      - name: Create screenshots directory
        run: |
          rm -rf ${{ github.workspace }}/screenshots/*
          mkdir -p ${{ github.workspace }}/screenshots
          chmod -R 777 ${{ github.workspace }}/screenshots

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Maven test
        run: mvn test
        env: # Переменные окружения для тестов
          CHROME_OPTIONS: --remote-allow-origins=*;--disable-gpu;--no-sandbox;--disable-dev-shm-usage;--headless=new;--window-size=1920,1080
          CI_RUN: true

      - name: Attach screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: ${{ github.workspace }}/screenshots

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history


#            - name: Run Tests
#                run: |
#                  mkdir -p build/allure-results
#                  # Add your test command here
#                  # Example: mvn test -Dallure.results.directory=build/allure-results
#
#                  - name: Generate Allure Report
#                    uses: simple-elf/allure-report-action@v1.7
#                    with:
#                      allure_results: build/allure-results
#                      allure_history: gh-pages/last-history
#                      gh_pages: true



      
